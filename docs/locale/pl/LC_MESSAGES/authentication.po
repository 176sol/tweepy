# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2022, Joshua Roesslein
# This file is distributed under the same license as the tweepy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tweepy 4.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-10 20:32+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../authentication.rst:7
msgid "Authentication"
msgstr ""

#: ../../authentication.rst:9
msgid "This supplements Twitter's `Authentication documentation`_."
msgstr ""

#: ../../authentication.rst:14
msgid "Introduction"
msgstr ""

#: ../../authentication.rst:16
msgid ""
"Tweepy supports the OAuth 1.0a User Context, OAuth 2.0 Bearer Token (App-"
"Only), and OAuth 2.0 Authorization Code Flow with PKCE (User Context) "
"authentication methods."
msgstr ""

#: ../../authentication.rst:21
msgid "Twitter API v1.1"
msgstr ""

#: ../../authentication.rst:24 ../../authentication.rst:78
msgid "OAuth 2.0 Bearer Token (App-Only)"
msgstr ""

#: ../../authentication.rst:25 ../../authentication.rst:79
msgid ""
"The simplest way to generate a bearer token is through your app's Keys "
"and Tokens tab under the `Twitter Developer Portal Projects & Apps "
"page`_."
msgstr ""

#: ../../authentication.rst:30
msgid ""
"You can then initialize :class:`OAuth2BearerHandler` with the bearer "
"token and initialize :class:`API` with the :class:`OAuth2BearerHandler` "
"instance::"
msgstr ""

#: ../../authentication.rst:38
msgid ""
"Alternatively, you can use the API / Consumer key and secret that can be "
"found on the same page and initialize :class:`OAuth2AppHandler` instead::"
msgstr ""

#: ../../authentication.rst:49 ../../authentication.rst:90
msgid "OAuth 1.0a User Context"
msgstr ""

#: ../../authentication.rst:50 ../../authentication.rst:91
msgid ""
"Similarly, the simplest way to authenticate as your developer account is "
"to generate an access token and access token secret through your app's "
"Keys and Tokens tab under the `Twitter Developer Portal Projects & Apps "
"page`_."
msgstr ""

#: ../../authentication.rst:54 ../../authentication.rst:95
msgid ""
"You'll also need the app's API / consumer key and secret that can be "
"found on that page."
msgstr ""

#: ../../authentication.rst:57
msgid ""
"You can then initialize :class:`OAuth1UserHandler` with all four "
"credentials and initialize :class:`API` with the "
":class:`OAuth1UserHandler` instance::"
msgstr ""

#: ../../authentication.rst:68 ../../authentication.rst:110
msgid "To authenticate as a different user, see :ref:`3-legged OAuth`."
msgstr ""

#: ../../authentication.rst:71
msgid "Twitter API v2"
msgstr ""

#: ../../authentication.rst:73
msgid ""
"Tweepy's interface for Twitter API v2, :class:`Client`, handles OAuth 2.0"
" Bearer Token (application-only) and OAuth 1.0a User Context "
"authentication for you."
msgstr ""

#: ../../authentication.rst:82
msgid ""
"You can then simply pass the bearer token to :class:`Client` when "
"initializing it::"
msgstr ""

#: ../../authentication.rst:98
msgid ""
"You can then simply pass all four credentials to :class:`Client` when "
"initializing it::"
msgstr ""

#: ../../authentication.rst:113
msgid "OAuth 2.0 Authorization Code Flow with PKCE (User Context)"
msgstr ""

#: ../../authentication.rst:114
msgid ""
"You can generate an access token to authenticate as a user using "
":class:`OAuth2UserHandler`."
msgstr ""

#: ../../authentication.rst:117
msgid ""
"You'll need to turn on OAuth 2.0 under the User authentication settings "
"section of your app's Settings tab under the `Twitter Developer Portal "
"Projects & Apps page`_. To do this, you'll need to provide a Callback / "
"Redirect URI / URL."
msgstr ""

#: ../../authentication.rst:122
msgid ""
"Then, you'll need to note the app's Client ID, which you can find through"
" your app's Keys and Tokens tab under the `Twitter Developer Portal "
"Projects & Apps page`_. If you're using a confidential client, you'll "
"also need to generate a Client Secret."
msgstr ""

#: ../../authentication.rst:127
msgid ""
"You can then initialize :class:`OAuth2UserHandler` with the scopes you "
"need::"
msgstr ""

#: ../../authentication.rst:139
msgid ""
"For a list of scopes, see the Scopes section of Twitter's `OAuth 2.0 "
"Authorization Code Flow with PKCE documentation`_."
msgstr ""

#: ../../authentication.rst:144 ../../authentication.rst:187
msgid "Then, you can get the authorization URL::"
msgstr ""

#: ../../authentication.rst:148
msgid ""
"This can be used to have a user authenticate your app. Once they've done "
"so, they'll be redirected to the Callback / Redirect URI / URL you "
"provided. You'll need to pass that authorization response URL to fetch "
"the access token::"
msgstr ""

#: ../../authentication.rst:156
msgid ""
"You can then pass the access token to :class:`Client` when initializing "
"it::"
msgstr ""

#: ../../authentication.rst:161
msgid "3-legged OAuth"
msgstr ""

#: ../../authentication.rst:162
msgid "This section supplements Twitter's `3-legged OAuth flow documentation`_."
msgstr ""

#: ../../authentication.rst:166
msgid ""
"To authenticate as a user other than your developer account, you'll need "
"to obtain their access tokens through the 3-legged OAuth flow."
msgstr ""

#: ../../authentication.rst:169
msgid ""
"First, you'll need to turn on OAuth 1.0 under the User authentication "
"settings section of your app's Settings tab under the `Twitter Developer "
"Portal Projects & Apps page`_. To do this, you'll need to provide a "
"Callback / Redirect URI / URL."
msgstr ""

#: ../../authentication.rst:174
msgid ""
"Then, you'll need the app's API / consumer key and secret that can be "
"found through your app's Keys and Tokens tab under the `Twitter Developer"
" Portal Projects & Apps page`_."
msgstr ""

#: ../../authentication.rst:178
msgid "You can then initialize an instance of :class:`OAuth1UserHandler`::"
msgstr ""

#: ../../authentication.rst:191
msgid ""
"To use Log in with Twitter / Sign in with Twitter, you can set the "
"``signin_with_twitter`` parameter when getting the authorization URL::"
msgstr ""

#: ../../authentication.rst:196
msgid ""
"This can be used to have a user authenticate your app. Once they've done "
"so, they'll be redirected to the Callback / Redirect URI / URL you "
"provided, with ``oauth_token`` and ``oauth_verifier`` parameters."
msgstr ""

#: ../../authentication.rst:200
msgid "You can then use the verifier to get the access token and secret::"
msgstr ""

#: ../../authentication.rst:206
msgid ""
"If you need to reinitialize :class:`OAuth1UserHandler`, you can set the "
"request token and secret afterward, before using the verifier to get the "
"access token and secret::"
msgstr ""

#: ../../authentication.rst:225
msgid ""
"Otherwise, you can simply use the old instance of "
":class:`OAuth1UserHandler`."
msgstr ""

#: ../../authentication.rst:227
msgid ""
"You can then use this instance of :class:`OAuth1UserHandler` to "
"initialize :class:`API`::"
msgstr ""

#: ../../authentication.rst:232
msgid ""
"You can also use the ``access_token`` and ``access_token_secret`` to "
"initialize a new instance of :class:`OAuth1UserHandler` to initialize "
":class:`API`::"
msgstr ""

#: ../../authentication.rst:241
msgid ""
"For initializing :class:`Client`, you can pass ``access_token`` and "
"``access_token_secret`` directly::"
msgstr ""

#: ../../authentication.rst:252
msgid "PIN-based OAuth"
msgstr ""

#: ../../authentication.rst:253
msgid "This section supplements Twitter's `PIN-based OAuth documentation`_."
msgstr ""

#: ../../authentication.rst:257
msgid ""
"The PIN-based OAuth flow can be used by setting the ``callback`` "
"parameter to ``\"oob\"``::"
msgstr ""

#: ../../authentication.rst:267
msgid "You can then get the authorization URL the same way::"
msgstr ""

#: ../../authentication.rst:271
msgid ""
"When the user authenticates with this URL, they'll be provided a PIN. You"
" can retrieve this PIN from the user to use as the verifier::"
msgstr ""

#: ../../authentication.rst:279
msgid ""
"You can then use the instance of :class:`OAuth1UserHandler` and/or the "
"``access_token`` and ``access_token_secret``."
msgstr ""

#: ../../authentication.rst:283
msgid "Reference"
msgstr ""

#: of tweepy.auth.OAuth1UserHandler:1
msgid "OAuth 1.0a User Context authentication handler"
msgstr ""

#: of tweepy.auth.OAuth1UserHandler:3
msgid "Renamed from :class:`OAuthHandler`"
msgstr ""

#: of tweepy.auth.OAuth1UserHandler.get_authorization_url:1
#: tweepy.auth.OAuth2UserHandler.get_authorization_url:1
msgid "Get the authorization URL to redirect the user to"
msgstr ""

#: of tweepy.auth.OAuth1UserHandler.get_access_token:1
msgid ""
"After user has authorized the app, get access token and secret with "
"verifier"
msgstr ""

#: of tweepy.auth.OAuth1UserHandler.set_access_token:1
msgid "Set through initialization instead."
msgstr ""

#: of tweepy.auth.OAuthHandler:1
msgid "Alias for :class:`OAuth1UserHandler`"
msgstr ""

#: of tweepy.auth.OAuthHandler:3
msgid "Use :class:`OAuth1UserHandler` instead."
msgstr ""

#: of tweepy.auth.OAuth2AppHandler:1
msgid ""
"OAuth 2.0 Bearer Token (App-Only) using API / Consumer key and secret "
"authentication handler"
msgstr ""

#: of tweepy.auth.OAuth2AppHandler:4
msgid "Renamed from :class:`AppAuthHandler`"
msgstr ""

#: of tweepy.auth.AppAuthHandler:1
msgid "Alias for :class:`OAuth2AppHandler`"
msgstr ""

#: of tweepy.auth.AppAuthHandler:3
msgid "Use :class:`OAuth2AppHandler` instead."
msgstr ""

#: of tweepy.auth.OAuth2BearerHandler:1
msgid "Bases: :py:class:`requests.auth.AuthBase`"
msgstr ""

#: of tweepy.auth.OAuth2BearerHandler:1
msgid "OAuth 2.0 Bearer Token (App-Only) authentication handler"
msgstr ""

#: of tweepy.auth.OAuth2UserHandler:1
msgid "Bases: :py:class:`requests_oauthlib.oauth2_session.OAuth2Session`"
msgstr ""

#: of tweepy.auth.OAuth2UserHandler:1
msgid ""
"OAuth 2.0 Authorization Code Flow with PKCE (User Context) authentication"
" handler"
msgstr ""

#: of tweepy.auth.OAuth2UserHandler.fetch_token:1
msgid ""
"After user has authorized the app, fetch access token with authorization "
"response URL"
msgstr ""

